/**
 * Copyright (C) 2013 Johannes Schnatterer
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This file is part of nusic.
 *
 * nusic is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * nusic is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with nusic.  If not, see <http://www.gnu.org/licenses/>.
 */
import nl.javadude.gradle.plugins.license.License

apply plugin: "com.android.application"

android {
    compileSdkVersion nusicCompileSdkVersion
    buildToolsVersion nusicBuildToolsVersion

    // MusicBrainz and Coverartarchive API Binding depend on apache http client
    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId project.group
        minSdkVersion nusicMinSdkVersion
        targetSdkVersion nusictTargetSdkVersion
        versionCode nusicVersionCode
        versionName project.version
        // Set final name "nusic-x.y.z.apk" Some things were just easier with maven.
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                output.outputFileName = output.outputFileName.replaceFirst(".*", "nusic-${project.version}.apk")
            }
        }
    }

    compileOptions {
        encoding nusicSourceEncoding
        sourceCompatibility nusicSourceCompatibility
        targetCompatibility nusicTargetCompatibility
    }

    // see https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.DexOptions.html#com.android.build.gradle.internal.dsl.DexOptions:preDexLibraries
    dexOptions {

        if (System.getProperty("dexOptionsMaxProcessCount") != null) {
            maxProcessCount = System.getProperty("dexOptionsMaxProcessCount").toInteger()
        }
        if (System.getProperty("dexOptionsJavaMaxHeapSize") != null) {
            javaMaxHeapSize = System.getProperty("dexOptionsJavaMaxHeapSize")
        }
        if (System.getProperty("dexOptionsPreDexLibraries") != null) {
            preDexLibraries = System.getProperty("dexOptionsPreDexLibraries").toBoolean()
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty('signKeystore')) {
                storeFile file(signKeystore)
            } else if (project.hasProperty('signKeystoreBase64')) {
                // Special case for travisCI
                storeFile decodeKeyStoreFileFromBase64Env(signKeystoreBase64)
            }
            storePassword signStorepasss
            keyAlias signAlias
            keyPassword signKeypass
        }
    }

    buildTypes {
        debug {
            // Also proguard debug build, or the 64K limit will be exceeded
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard.cfg"
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard.cfg"
            signingConfig signingConfigs.release
        }
    }
    packagingOptions {
        // Both guava and roboguice contain this file. Avoid DuplicateFileException
        pickFirst "META-INF/maven/com.google.guava/guava/pom.properties"
        pickFirst "META-INF/maven/com.google.guava/guava/pom.xml"
    }
}

// Check licenses in all files, even when their not on the sourceSets.
task licenseXmlResAndAssets(type: License) {
    source = fileTree(dir: "src").include("**/*")
    check = true
}
tasks['license'].dependsOn licenseXmlResAndAssets
// Add licenses to all files, even when their not on the sourceSets.
task licenseFormatXmlResAndAssets(type: License) {
    source = fileTree(dir: "src").include("**/*")
}
licenseFormat.dependsOn licenseFormatXmlResAndAssets

sonarqube {
    //noinspection GroovyAssignabilityCheck
    properties {
        def compileDependencies = project.configurations.compile.files.collect { it.path } join(",")
        /* SonarQube needs to be informed about your libraries and the android.jar to understand that methods like
         * onResume() is called by the Android framework. Without that information SonarQube will very likely create warnings
         * that those methods are never used and they should be removed. Same applies for libraries where parent classes
         * are required to understand how a class works and is used. */
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-${nusicCompileSdkVersion}/android.jar," +
                "build/intermediates/**/*.jar,$compileDependencies"

        // See https://github.com/SonarSource/sonar-examples/blob/master/projects/languages/android/android-sonarqube-gradle/app/build.gradle
        // and https://room-15.github.io/blog/2016/01/21/Static-code-quality-measurements-with-SonarQube-Jacoco-and-UnitTests/

        property "sonar.sourceEncoding", nusicSourceEncoding
        property "sonar.sources", "src/main/java"
        // This project does not have tests, yet
        //property "sonar.tests", "src/test/java"
        // first defines where the java files are, the second where the xml files are
        property "sonar.exclusions", "build/**,**/*.png"
        property "sonar.import_unknown_files", true

        property "sonar.binaries", "build/intermediates/classes/release"
        property "sonar.java.binaries", "build/intermediates/classes/release"
        property "sonar.java.libraries", libraries

        property "sonar.java.test.binaries", "build/intermediates/classes/release"
        property "sonar.java.test.libraries", libraries
    }
}

dependencies {
    // Nusic modules
    compile project(":nusic-ui-android"),
            project(":nusic-data-android"),
            project(":nusic-data-api"),
            project(":nusic-core-api")

    compile( project(":nusic-core-android")) {
        // This dependency is provided by android anyway, so spare the APK the bloat
        exclude (group: "commons-logging", module: "commons-logging")
        // Provided by android until 6, then by useLibrary 'org.apache.http.legacy'
        exclude (group: "org.apache.httpcomponents", module: "httpclient")
    }

    // External dependencies
    compile libraries.roboguice,
            libraries.julToSlf4j,
            libraries.androidSupportV4

    compile (libraries.logback) {
        // This dependency is provided by android anyway, so spare the APK the bloat
        exclude group: "commons-logging", module: "commons-logging"
    }
}

static def decodeKeyStoreFileFromBase64Env(String keyStoreBase64) {
    File tempKeyStoreFile = File.createTempFile("tmp_ks_", ".jks", File.createTempDir())
    FileOutputStream fos = null
    try {
        fos = new FileOutputStream(tempKeyStoreFile)
        fos.write(keyStoreBase64.decodeBase64())
        fos.flush()
    } finally {
        if (fos != null) {
            fos.close()
        }
    }
    return tempKeyStoreFile
}
