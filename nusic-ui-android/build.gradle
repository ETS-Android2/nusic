/**
 * Copyright (C) 2013 Johannes Schnatterer
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This file is part of nusic.
 *
 * nusic is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * nusic is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with nusic.  If not, see <http://www.gnu.org/licenses/>.
 */
import de.undercouch.gradle.tasks.download.Download
import org.pegdown.PegDownProcessor
import nl.javadude.gradle.plugins.license.License

apply plugin: "com.android.library"
apply plugin: 'de.undercouch.download'
apply plugin: 'jacoco-android'

def assetsDir = "src/main/assets/"
def resDir = "src/main/res/"

def assetsDirFiltered = "$buildDir/filtered-assets/"
def resDirFiltered = "$buildDir/filtered-res/"

android {
    compileSdkVersion nusicCompileSdkVersion
    buildToolsVersion nusicBuildToolsVersion

    defaultConfig {
        minSdkVersion nusicMinSdkVersion
        targetSdkVersion nusictTargetSdkVersion
        versionCode nusicVersionCode
        versionName project.version
    }

    compileOptions {
        encoding nusicSourceEncoding
        sourceCompatibility nusicSourceCompatibility
        targetCompatibility nusicTargetCompatibility
    }

    sourceSets {
        main {
            // Add directory where HTML files are put
            assets.srcDirs += assetsDirFiltered
            // Use only filtered dir because there is no exclusion mechanism for filtering.
            res.srcDirs = [resDirFiltered]
        }
    }
}

// Check licenses in all files, even when their not on the sourceSets.
task licenseXmlResAndAssets(type: License) {
    source = fileTree(dir: "src").include("**/*")
    check = true
}
tasks['license'].dependsOn licenseXmlResAndAssets
// Add licenses to all files, even when their not on the sourceSets.
task licenseFormatXmlResAndAssets(type: License) {
    source = fileTree(dir: "src").include("**/*")
}
licenseFormat.dependsOn licenseFormatXmlResAndAssets

sonarqube {
    properties {
        def compileDependencies = project.configurations.compile.files.collect { it.path } join(",")
        /* SonarQube needs to be informed about your libraries and the android.jar to understand that methods like
         * onResume() is called by the Android framework. Without that information SonarQube will very likely create warnings
         * that those methods are never used and they should be removed. Same applies for libraries where parent classes
         * are required to understand how a class works and is used. */
        def libraries = "${project.android.sdkDirectory.getPath()}/platforms/android-${nusicCompileSdkVersion}/android.jar," +
            "${project.android.sdkDirectory.getPath()}/extras/android/m2repository/com/android/support/**/*.jar,build/intermediates/**/*.jar,$compileDependencies"

        // See https://github.com/SonarSource/sonar-examples/blob/master/projects/languages/android/android-sonarqube-gradle/app/build.gradle
        // and https://room-15.github.io/blog/2016/01/21/Static-code-quality-measurements-with-SonarQube-Jacoco-and-UnitTests/
        property "sonar.sourceEncoding", nusicSourceEncoding
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"

        // first defines where the java files are, the second where the xml files are
        property "sonar.exclusions", "build/**,**/*.png"
        property "sonar.import_unknown_files", true

        property "sonar.binaries", "build/intermediates/classes/release"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/intermediates/classes/release"
        property "sonar.java.libraries", libraries

        property "sonar.java.test.binaries", "build/intermediates/classes/release"
        property "sonar.java.test.libraries", libraries

        property "sonar.jacoco.reportPaths", "build/jacoco/testReleaseUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/testReleaseUnitTest"
        property "sonar.android.lint.report", "build/outputs/lint-results.xml"
    }
}

project.tasks.withType(JavaCompile) { task ->
    /* This defines the class name of the annotation database, which is then generated by
     * roboblender annotation processor*/
    options.compilerArgs << "-AguiceAnnotationDatabasePackageName=${project.group}.annotation.nusicUiAndroid"
}

/**
 * Converts markdown files to HTML and copies them to assets
 * // TODO replace by plugin
 */
task markdownToHtml << {
    def sourceDir = project.parent.projectDir
    def outputDir = file(assetsDirFiltered)
    def inputFiles = ["NOTICE.md", "CHANGELOG.md", "contributors.md"]

    def pdp = new PegDownProcessor()
    outputDir.mkdirs()
    inputFiles.each {
        def inputFile = new File(sourceDir, it)
        new File(outputDir, inputFile.name.replaceFirst(~/\.[^\.]+$/, '') + '.html').withWriter
            { w -> w.write(pdp.markdownToHtml(inputFile.text)) }
    }

    //project.ext.contributors = pdp.markdownToHtml(new File(sourceDir, "contributors.md").text)
}

/**
 * Expands constants into constants.xml
 */
task copyRes(type: Copy) {
    dependsOn markdownToHtml
    from "$resDir"
    into "$resDirFiltered"
    exclude 'values/constants.xml*'

    // Expand properties into constants.xml
    from("$resDir/values/constants.xml") {
        into "values"
        expand(project.properties)
    }
}
// Make sure to copy resources before doing anything with them
build.dependsOn copyRes
preBuild.dependsOn copyRes

/**
 * Download privacyPolicy from github site
 */
task downloadPrivacyPolicy(type: Download) {
    dependsOn copyRes
    src "https://schnatterer.github.com/nusic/privacyPolicy.html"
    // YES download it in input directory! This way we notice when something changed!
    dest "$assetsDir/privacyPolicy.html"
}

dependencies {
    // Nusic modules
    compile(
        project(":nusic-data-api"),
        project(":nusic-core-api"),
        project(":nusic-util")
    )

    // External dependencies
    compile(
        "com.nostra13.universalimageloader:universal-image-loader:1.9.2",
        libraries.commonsIo,
        libraries.roboguice,
        libraries.slf4j,
        // An explicit log implementation is needed at compile time, because the log level is set by the app
        libraries.logback,
        libraries.logbackAndroidUtils,
        libraries.androidDesign
    )
    // Enable annotation database to improve performance
    annotationProcessor libraries.roboblender

    // Test dependencies
    testCompile(
        libraries.junit,
        libraries.hamcrest,
        libraries.mockito,
        libraries.robolectric,
        libraries.opengl
    )
}


jacocoAndroidUnitTestReport {
    csv.enabled true
    html.enabled true
    xml.enabled true
}
